

testng freamework -

It is framework (strctured arrangement) use for writing test classe.

This freamework designed to simplify broad range of testing needs from unit testing to intergration
testing.
 
It supports different annotation and generate script in test format.

it can generate report.


Configure testNG Framework in project-

Go to Help

go to eclipse market place

serch test Ng

click on install

Finish

Go toproject

Go to build path
 
add library

add testng

refresh project-

-----------------------------
If first case not worked-

Go to Help menu

Go to install new software

Add the url in work with (	https://testng.org/testng-eclipse-update-site/7.4.0/)

checkbox click testng

click on next-

Finish


------------------------------------------------------
write test class-

ex-

package testNgP;

import java.time.Duration;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

public class TestNgClass {
	WebDriver driver;
	
	@BeforeMethod
	public void initalizatin() {
		System.setProperty("webdriver.chrome.driver", "C:\\Users\\Admin\\Desktop\\Slenium Jar\\Chrome_96\\chromedriver.exe");

		//launch browser
				driver=new ChromeDriver();
				
				//Maximize window
				driver.manage().window().maximize();
				
				//adding implicitly waits 
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
				
				//open session
				String url="https://chercher.tech/practice/explicit-wait-sample-selenium-webdriver";
				driver.get(url);
				
	}
	@Test
	public void testCase1() {
		
		String title=driver.getTitle();
		System.out.println(title);
		if (title.equals("ExplicitlyWait Practice page in Selenium Webdriver")) {
		Assert.assertTrue(true);}
		else {
			Assert.assertTrue(false);
		}
	}
	

}


testng Annotation---

Order of execution -

Before Suite
Before Test 
Before Class
Before method
test case
After Method
After class
After Test
After Suite



Test ng suite-

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
  <test thread-count="5" name="Test">
    <classes>
      <class name="testNgP.TestNG2"/>
      <class name="testNgP.TestNgClass"/>
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->



-----------------------------
Attributes for test-

When we want to modify execution order we use the attribute.


1) priority-

ex-

package testNgP;

import org.testng.annotations.Test;

public class TestNG3 {
	
	
  @Test (priority=3)
  public void login() {
	  
	  System.out.println("login");
  }
  
  @Test (priority=1)
  public void verifyPageDeatils() {
	  
	  System.out.println("verifyPageDeatils");
  }
  @Test (priority=2)
  public void verifyUrl() {
	  
	  System.out.println("verifyUrl");
  }
 
 
}



2)dependsOnMethods-

package testNgP;

import org.testng.annotations.Test;

public class TestNG3 {
	
	
  @Test (dependsOnMethods="verifyUrl")
  public void login() {
	  
	  System.out.println("login");
  }
 
  @Test 
  public void verifyUrl() {
	  
	  System.out.println("verifyUrl");
  }
  @Test (dependsOnMethods="login")
  public void homePageTitle() {
	  
	  System.out.println("homePageTitle");
  }
 
}

3) InvcocationCount-

ex-
package testNgP;

import org.testng.annotations.Test;

public class TestNG3 {
	
	
  @Test (invocationCount=5)
  public void login() {
	  
	  System.out.println("login");
  }
 
  @Test (invocationCount=2)
  public void verifyUrl() {
	  
	  System.out.println("verifyUrl");
  }
  @Test (invocationCount=4,dependsOnMethods="login")
  public void homePageTitle() {
	  
	  System.out.println("homePageTitle");
  }
 
}


4) enabled-

ex-package testNgP;

import org.testng.Assert;
import org.testng.annotations.Test;

public class TestNG3 {
	
	
  @Test (dependsOnMethods="verifyUrl")
  public void login() {
	  
	  System.out.println("login");
  }
 
  @Test 
  public void verifyUrl() {
	 
	  System.out.println("verifyUrl");
	  Assert.assertTrue(false);
  }
  @Test (enabled=false)
  public void homePageTitle() {
	  
	  System.out.println("homePageTitle");
  }
 
}

5) timeout-

ex-
package testNgP;

import org.testng.Assert;
import org.testng.annotations.Test;

public class TestNG3 {
	
	
  @Test (timeOut=6000)
  public void login() throws InterruptedException {
	  Thread.sleep(4000);
	  System.out.println("login");
  }
 
  @Test 
  public void verifyUrl() {
	 
	  System.out.println("verifyUrl");
  }
  @Test 
  public void homePageTitle() {
	  
	  System.out.println("homePageTitle");
  }
 
}


groups-

When we want toi execute test casess base on some functionality or requirement we are identifying
those test cases under groups attribute and configure this in suite level.

ex-
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<groups>
		<run>
			<include name="regression"></include>
		</run>
	</groups>
	<test thread-count="5" name="Test">
		<classes>
			<class name="testNgP.TestNG3" />
			<class name="testNgP.TestNG4" />
		</classes>
	</test> <!-- Test -->
</suite> <!-- Suite -->

package testNgP;

import org.testng.Assert;
import org.testng.annotations.Test;

public class TestNG3 {
	
	
  @Test (groups={"sanity", "regression"})
  public void login() throws InterruptedException {
	 
	  System.out.println("login");
  }
 
  @Test (groups="regression")
  public void verifyUrl() {
	 
	  System.out.println("verifyUrl");
  }
  @Test 
  public void homePageTitle() {
	  
	  System.out.println("homePageTitle");
  }
 
}
package testNgP;

import org.testng.annotations.Test;

public class TestNG4 {
	@Test (groups="sanity")
	public void testCase1()
	{
		System.out.println("tesct case 1 of TestNG4");
	}
	@Test (groups="regression")
	public void testCase2()
	{
		System.out.println("tesct case 2 of TestNG4");
	}
	@Test (groups="sanity")
	public void testCase3()
	{
		System.out.println("tesct case 3 of TestNG4");
	}
}





------------------------------------------------------------------------

We can pass the parameter using the testng -

1) using 
paremetrs-
<parameter name="browser" value="chrome"></parameter>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite parallel="tests" name="Suite">
	<test parallel="tests" thread-count="5" name="Test1">
		<parameter name="browser" value="chrome"></parameter>
		<classes>
			<class name="testNgP.TestNgClass" />
		</classes>
	</test> <!-- Test -->
	<test parallel="tests" thread-count="5" name="Test2">
		<parameter name="browser" value="firefox"></parameter>
		<classes>
			<class name="testNgP.TestNgClass"/>
		</classes>
	</test> <!-- Test -->
</suite> <!-- Suite -->


package testNgP;

import java.time.Duration;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

public class TestNgClass {
	WebDriver driver;
	
	@BeforeTest
	@Parameters("browser")
	public void initalizatin(String arg) {
		
		if (arg.equalsIgnoreCase("chrome")) {
		
		System.setProperty("webdriver.chrome.driver", "C:\\Users\\Admin\\Desktop\\Slenium Jar\\Chrome_96\\chromedriver.exe");

		//launch browser
				driver=new ChromeDriver();
				
				//Maximize window
				driver.manage().window().maximize();
				
				//adding implicitly waits 
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
				
				//open session
				String url="https://chercher.tech/practice/explicit-wait-sample-selenium-webdriver";
				driver.get(url);
		}
		else if (arg.equalsIgnoreCase("firefox")) {
			
			System.setProperty("webdriver.gecko.driver", "C:\\Users\\Admin\\Desktop\\Slenium Jar\\Gecko\\geckodriver.exe");

			//launch browser
					driver=new FirefoxDriver();
					
					//Maximize window
					driver.manage().window().maximize();
					
					//adding implicitly waits 
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
					
					//open session
					String url="https://chercher.tech/practice/explicit-wait-sample-selenium-webdriver";
					driver.get(url);
			}
				
	}
	@Test
	public void testCase1() {
		
		String title=driver.getTitle();
		System.out.println(title);
		if (title.equals("ExplicitlyWait Practice page in Selenium Webdriver")) {
		Assert.assertTrue(true);}
		else {
			Assert.assertTrue(false);
		}
	}
	

}

-------------------------------------------------
In testNg we can achiev the parametrmization-


1) using parameters


2) using DataProvider-



ex-
package testNgP;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

public class DProvider {
	WebDriver driver;
	
	@BeforeClass
	public void initalization() {
		

		System.setProperty("webdriver.chrome.driver", "C:\\Users\\Admin\\Desktop\\Slenium Jar\\Chrome_96\\chromedriver.exe");

		//launch browser
				driver=new ChromeDriver();
				
				//Maximize window
				driver.manage().window().maximize();
				
				//adding implicitly waits 
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
				
				//open session
				String url="https://www.facebook.com/";
				driver.get(url);
	}

	
  @Test (dataProvider="testData")
  public void login(String s,String v) throws InterruptedException {
	  
	  driver.findElement(By.xpath("//*[@id='email']")).sendKeys(s);
	  
	  driver.findElement(By.xpath("//*[@id='pass']")).sendKeys(v);
	 
	  driver.findElement(By.xpath("//*[@name='login']")).click();
	  driver.navigate().back();
	  driver.findElement(By.xpath("//*[@id='email']")).clear();
	  Thread.sleep(2000);
	  System.out.println( "test case for -" + s + v);
  }
  
  @DataProvider (name="testData")
  public String[][] getData() {
	  
	  String [][] data= {{"abc@gmail.com", "abc123"},{"xyz@gmail.com", "xyz123"}};
	return data;
	  
  }
}

---------------------------------------------------------------------
Listeners-

It listen to the event defined in selenium code & behave accordingly.

Listeners annotation activated either before or after test case.


ItestListener interface need to  implement.


ex-

package testNgP;

import org.testng.ITestListener;
import org.testng.ITestResult;

public class TestNGListenersClass implements ITestListener {


	@Override
	public void onTestFailure(ITestResult result) {
		System.out.println("This will run when Test case Failed");
	}

	@Override
	public void onTestSkipped(ITestResult result) {
		
		System.out.println("This will run when Test case Skip");
	}
	
	

}

package testNgP;

import org.testng.Assert;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;

@Listeners(testNgP.TestNGListenersClass.class)
public class TestCasesForListeners {
	
	@Test
	public void testCase1() {
		
		System.out.println("test Case 1");
	}
	
	@Test
	public void testCase2() {
		
		System.out.println("test Case 2");
		Assert.assertFalse(true);
	}
	
	@Test(dependsOnMethods="testCase2")
	public void testCase3() {
		
		System.out.println("test Case 3");
	}

}


